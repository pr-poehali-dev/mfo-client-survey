import React, { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Slider } from '@/components/ui/slider';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Progress } from '@/components/ui/progress';
import { Badge } from '@/components/ui/badge';
import Icon from '@/components/ui/icon';

const Index = () => {
  const [currentStep, setCurrentStep] = useState(1);
  const [formData, setFormData] = useState({
    phone: '',
    address: '',
    workAddress: '',
    relativesContact: '',
    amount: [50000],
    period: [30],
    documents: null as File | null,
  });
  const [verificationCode, setVerificationCode] = useState('');
  const [isVerifying, setIsVerifying] = useState(false);
  const [applicationStatus, setApplicationStatus] = useState('reviewing'); // 'approved', 'rejected', 'reviewing'
  const [timer, setTimer] = useState(50);
  const [showCodeDialog, setShowCodeDialog] = useState(false);
  const [showCallbackDialog, setShowCallbackDialog] = useState(false);
  const [hasDebt, setHasDebt] = useState(false);

  // –¢–∞–π–º–µ—Ä —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è –∑–∞—è–≤–∫–∏
  useEffect(() => {
    if (currentStep === 6 && timer > 0) {
      const interval = setInterval(() => {
        setTimer(prev => {
          if (prev === 1) {
            // –°–ª—É—á–∞–π–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–¥–æ–±—Ä–µ–Ω–∏–µ –∏–ª–∏ –æ—Ç–∫–∞–∑
            setApplicationStatus(Math.random() > 0.3 ? 'approved' : 'rejected');
            setHasDebt(Math.random() > 0.7);
          }
          return prev - 1;
        });
      }, 1000);
      return () => clearInterval(interval);
    }
  }, [currentStep, timer]);

  const handleNextStep = () => {
    if (currentStep < 7) {
      setCurrentStep(currentStep + 1);
    }
  };

  const handlePrevStep = () => {
    if (currentStep > 1) {
      setCurrentStep(currentStep - 1);
    }
  };

  const handleVerifyPhone = () => {
    setShowCodeDialog(true);
    // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ (–∏–º–∏—Ç–∞—Ü–∏—è)
    const code = Math.floor(1000 + Math.random() * 9000);
    console.log('–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è:', code);
  };

  const handleCodeSubmit = () => {
    setIsVerifying(true);
    setTimeout(() => {
      setIsVerifying(false);
      setShowCodeDialog(false);
      handleNextStep();
    }, 2000);
  };

  const calculateMonthlyPayment = () => {
    const amount = formData.amount[0];
    const period = formData.period[0];
    const rate = 0.03; // 3% –≤ –¥–µ–Ω—å
    return Math.round(amount * (1 + rate * period) / period);
  };

  const steps = [
    '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ',
    '–ê–¥—Ä–µ—Å–∞',
    '–ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–æ–¥–Ω—ã—Ö',
    '–î–æ–∫—É–º–µ–Ω—Ç—ã',
    '–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–π–º–∞',
    '–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏',
    '–†–µ–∑—É–ª—å—Ç–∞—Ç'
  ];

  return (
    <div className="min-h-screen bg-gradient-to-br from-mfo-blue-50 via-white to-mfo-blue-100 font-[Roboto]">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å 3D —ç—Ñ—Ñ–µ–∫—Ç–æ–º */}
      <div className="bg-gradient-to-r from-mfo-blue-600 to-mfo-blue-800 text-white py-8 shadow-2xl">
        <div className="container mx-auto px-4">
          <h1 className="text-4xl font-bold text-center mb-2 animate-fade-in">
            üí∞ –ë–´–°–¢–†–´–ï –ó–ê–ô–ú–´
          </h1>
          <p className="text-center text-mfo-blue-100 text-lg animate-fade-in">
            –ü–æ–ª—É—á–∏—Ç–µ –¥–µ–Ω—å–≥–∏ –∑–∞ 15 –º–∏–Ω—É—Ç ‚Ä¢ –î–æ 100,000 ‚ÇΩ ‚Ä¢ –ë–µ–∑ —Å–ø—Ä–∞–≤–æ–∫
          </p>
        </div>
      </div>

      {/* –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä */}
      <div className="container mx-auto px-4 py-6">
        <Card className="animate-scale-in shadow-xl bg-white/90 backdrop-blur-sm border-0">
          <CardContent className="p-6">
            <div className="mb-6">
              <div className="flex justify-between items-center mb-2">
                <span className="text-sm font-medium text-mfo-blue-700">
                  –®–∞–≥ {currentStep} –∏–∑ {steps.length}
                </span>
                <span className="text-sm text-gray-600">
                  {steps[currentStep - 1]}
                </span>
              </div>
              <Progress value={(currentStep / steps.length) * 100} className="h-3" />
            </div>

            {/* –≠—Ç–∞–ø—ã –∞–Ω–∫–µ—Ç—ã */}
            <div className="animate-fade-in">
              {currentStep === 1 && (
                <div className="space-y-6">
                  <h2 className="text-2xl font-bold text-mfo-blue-800 mb-6">
                    üì± –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                  </h2>
                  <div className="grid gap-4">
                    <div>
                      <Label htmlFor="phone">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *</Label>
                      <Input
                        id="phone"
                        placeholder="+7 (999) 123-45-67"
                        value={formData.phone}
                        onChange={(e) => setFormData({...formData, phone: e.target.value})}
                        className="mt-1"
                      />
                    </div>
                    <Button 
                      onClick={handleVerifyPhone}
                      className="w-full bg-mfo-blue-600 hover:bg-mfo-blue-700 animate-pulse-glow"
                      disabled={!formData.phone}
                    >
                      <Icon name="Phone" className="mr-2" />
                      –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
                    </Button>
                  </div>
                </div>
              )}

              {currentStep === 2 && (
                <div className="space-y-6">
                  <h2 className="text-2xl font-bold text-mfo-blue-800 mb-6">
                    üè† –ê–¥—Ä–µ—Å–∞
                  </h2>
                  <div className="grid gap-4">
                    <div>
                      <Label htmlFor="address">–ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ *</Label>
                      <Textarea
                        id="address"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"
                        value={formData.address}
                        onChange={(e) => setFormData({...formData, address: e.target.value})}
                        className="mt-1"
                      />
                    </div>
                    <div>
                      <Label htmlFor="workAddress">–ê–¥—Ä–µ—Å —Ä–∞–±–æ—Ç—ã</Label>
                      <Textarea
                        id="workAddress"
                        placeholder="–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞ —Ä–∞–±–æ—Ç—ã"
                        value={formData.workAddress}
                        onChange={(e) => setFormData({...formData, workAddress: e.target.value})}
                        className="mt-1"
                      />
                    </div>
                  </div>
                </div>
              )}

              {currentStep === 3 && (
                <div className="space-y-6">
                  <h2 className="text-2xl font-bold text-mfo-blue-800 mb-6">
                    üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ö–æ–Ω—Ç–∞–∫—Ç—ã —Ä–æ–¥–Ω—ã—Ö
                  </h2>
                  <div>
                    <Label htmlFor="relatives">–ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–ª–∏–∑–∫–∏—Ö —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ *</Label>
                    <Textarea
                      id="relatives"
                      placeholder="–§–ò–û, —Å—Ç–µ–ø–µ–Ω—å —Ä–æ–¥—Å—Ç–≤–∞, –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"
                      value={formData.relativesContact}
                      onChange={(e) => setFormData({...formData, relativesContact: e.target.value})}
                      className="mt-1"
                      rows={4}
                    />
                  </div>
                </div>
              )}

              {currentStep === 4 && (
                <div className="space-y-6">
                  <h2 className="text-2xl font-bold text-mfo-blue-800 mb-6">
                    üìÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
                  </h2>
                  <div className="border-2 border-dashed border-mfo-blue-300 rounded-lg p-8 text-center hover:border-mfo-blue-500 transition-colors">
                    <Icon name="Upload" size={48} className="mx-auto text-mfo-blue-400 mb-4" />
                    <p className="text-lg font-medium text-mfo-blue-700 mb-2">
                      –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –ø–∞—Å–ø–æ—Ä—Ç–∞
                    </p>
                    <p className="text-sm text-gray-600 mb-4">
                      –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: JPG, PNG (–¥–æ 5 –ú–ë)
                    </p>
                    <input
                      type="file"
                      accept="image/*"
                      onChange={(e) => setFormData({...formData, documents: e.target.files?.[0] || null})}
                      className="hidden"
                      id="documents"
                    />
                    <Label htmlFor="documents">
                      <Button asChild className="bg-mfo-blue-600 hover:bg-mfo-blue-700">
                        <span>–í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª</span>
                      </Button>
                    </Label>
                    {formData.documents && (
                      <p className="text-green-600 mt-2">
                        ‚úÖ –§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {formData.documents.name}
                      </p>
                    )}
                  </div>
                </div>
              )}

              {currentStep === 5 && (
                <div className="space-y-6">
                  <h2 className="text-2xl font-bold text-mfo-blue-800 mb-6">
                    üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –∑–∞–π–º–∞
                  </h2>
                  <div className="grid md:grid-cols-2 gap-6">
                    <Card className="bg-gradient-to-br from-mfo-blue-50 to-white border-mfo-blue-200">
                      <CardHeader>
                        <CardTitle className="text-mfo-blue-700">–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–π–º–∞</CardTitle>
                      </CardHeader>
                      <CardContent className="space-y-6">
                        <div>
                          <Label>–°—É–º–º–∞ –∑–∞–π–º–∞: {formData.amount[0].toLocaleString()} ‚ÇΩ</Label>
                          <Slider
                            value={formData.amount}
                            onValueChange={(value) => setFormData({...formData, amount: value})}
                            max={100000}
                            min={5000}
                            step={5000}
                            className="mt-2"
                          />
                          <div className="flex justify-between text-xs text-gray-500 mt-1">
                            <span>5,000 ‚ÇΩ</span>
                            <span>100,000 ‚ÇΩ</span>
                          </div>
                        </div>
                        <div>
                          <Label>–°—Ä–æ–∫ –∑–∞–π–º–∞: {formData.period[0]} –¥–Ω–µ–π</Label>
                          <Slider
                            value={formData.period}
                            onValueChange={(value) => setFormData({...formData, period: value})}
                            max={30}
                            min={7}
                            step={1}
                            className="mt-2"
                          />
                          <div className="flex justify-between text-xs text-gray-500 mt-1">
                            <span>7 –¥–Ω–µ–π</span>
                            <span>30 –¥–Ω–µ–π</span>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                    
                    <Card className="bg-gradient-to-br from-green-50 to-white border-green-200">
                      <CardHeader>
                        <CardTitle className="text-green-700">–†–∞—Å—á–µ—Ç –ø–ª–∞—Ç–µ–∂–µ–π</CardTitle>
                      </CardHeader>
                      <CardContent>
                        <div className="space-y-4">
                          <div className="flex justify-between">
                            <span>–°—É–º–º–∞ –∑–∞–π–º–∞:</span>
                            <span className="font-bold">{formData.amount[0].toLocaleString()} ‚ÇΩ</span>
                          </div>
                          <div className="flex justify-between">
                            <span>–°—Ä–æ–∫:</span>
                            <span className="font-bold">{formData.period[0]} –¥–Ω–µ–π</span>
                          </div>
                          <div className="flex justify-between">
                            <span>–°—Ç–∞–≤–∫–∞:</span>
                            <span className="font-bold">3% –≤ –¥–µ–Ω—å</span>
                          </div>
                          <hr />
                          <div className="flex justify-between text-lg">
                            <span>–ö –≤–æ–∑–≤—Ä–∞—Ç—É:</span>
                            <span className="font-bold text-green-600">
                              {Math.round(formData.amount[0] * (1 + 0.03 * formData.period[0])).toLocaleString()} ‚ÇΩ
                            </span>
                          </div>
                        </div>
                      </CardContent>
                    </Card>
                  </div>
                </div>
              )}

              {currentStep === 6 && (
                <div className="text-center space-y-6">
                  <div className="animate-pulse-glow">
                    <Icon name="Clock" size={64} className="mx-auto text-mfo-blue-500 mb-4" />
                  </div>
                  <h2 className="text-2xl font-bold text-mfo-blue-800">
                    ‚è±Ô∏è –†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏
                  </h2>
                  <div className="bg-mfo-blue-50 rounded-lg p-6 border border-mfo-blue-200">
                    <div className="text-4xl font-bold text-mfo-blue-700 mb-2">
                      {timer} —Å–µ–∫
                    </div>
                    <p className="text-mfo-blue-600">
                      –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–∞—à—É –∑–∞—è–≤–∫—É –∏ –∫—Ä–µ–¥–∏—Ç–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é...
                    </p>
                  </div>
                  <div className="grid grid-cols-3 gap-4 mt-6">
                    <div className="text-center">
                      <Icon name="FileCheck" className="mx-auto text-green-500 mb-2" />
                      <p className="text-sm">–î–æ–∫—É–º–µ–Ω—Ç—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã</p>
                    </div>
                    <div className="text-center">
                      <Icon name="Calculator" className="mx-auto text-blue-500 mb-2" />
                      <p className="text-sm">–†–∞—Å—á–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω</p>
                    </div>
                    <div className="text-center">
                      <Icon name="Shield" className="mx-auto text-orange-500 mb-2" />
                      <p className="text-sm">–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–µ–¥–∏—Ç–Ω–æ–π –∏—Å—Ç–æ—Ä–∏–∏</p>
                    </div>
                  </div>
                </div>
              )}

              {currentStep === 7 && (
                <div className="text-center space-y-6">
                  {applicationStatus === 'approved' && !hasDebt && (
                    <div className="animate-scale-in">
                      <div className="bg-green-50 border border-green-200 rounded-lg p-8">
                        <Icon name="CheckCircle" size={64} className="mx-auto text-green-500 mb-4" />
                        <h2 className="text-2xl font-bold text-green-700 mb-4">
                          üéâ –ó–∞—è–≤–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–∞!
                        </h2>
                        <p className="text-green-600 mb-6">
                          –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞—à –∑–∞–π–º –Ω–∞ {formData.amount[0].toLocaleString()} ‚ÇΩ –æ–¥–æ–±—Ä–µ–Ω.
                        </p>
                        <Badge className="bg-green-100 text-green-700 text-lg px-4 py-2">
                          –°—Ç–∞—Ç—É—Å: –û–î–û–ë–†–ï–ù–û
                        </Badge>
                        <div className="mt-6">
                          <Button 
                            className="bg-green-600 hover:bg-green-700 mr-4"
                            onClick={() => setShowCallbackDialog(true)}
                          >
                            <Icon name="Phone" className="mr-2" />
                            –ü–æ–ª—É—á–∏—Ç—å –∑–≤–æ–Ω–æ–∫
                          </Button>
                        </div>
                      </div>
                    </div>
                  )}

                  {(applicationStatus === 'rejected' || hasDebt) && (
                    <div className="animate-scale-in">
                      <div className="bg-red-50 border border-red-200 rounded-lg p-8">
                        <Icon name="XCircle" size={64} className="mx-auto text-red-500 mb-4" />
                        <h2 className="text-2xl font-bold text-red-700 mb-4">
                          ‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞
                        </h2>
                        <p className="text-red-600 mb-6">
                          {hasDebt 
                            ? "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ –¥—Ä—É–≥–∏–º –∑–∞–π–º–∞–º."
                            : "–ó–∞—è–≤–∫–∞ –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∫—Ä–µ–¥–∏—Ç–æ–≤–∞–Ω–∏—è."
                          }
                        </p>
                        <Badge className="bg-red-100 text-red-700 text-lg px-4 py-2">
                          –°—Ç–∞—Ç—É—Å: –û–¢–ö–õ–û–ù–ï–ù–û
                        </Badge>
                      </div>
                    </div>
                  )}
                </div>
              )}
            </div>

            {/* –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ */}
            {currentStep < 6 && (
              <div className="flex justify-between mt-8">
                <Button
                  variant="outline"
                  onClick={handlePrevStep}
                  disabled={currentStep === 1}
                  className="border-mfo-blue-300 text-mfo-blue-700"
                >
                  <Icon name="ChevronLeft" className="mr-2" />
                  –ù–∞–∑–∞–¥
                </Button>
                <Button
                  onClick={handleNextStep}
                  className="bg-mfo-blue-600 hover:bg-mfo-blue-700 animate-pulse-glow"
                  disabled={
                    (currentStep === 1 && !formData.phone) ||
                    (currentStep === 2 && !formData.address) ||
                    (currentStep === 3 && !formData.relativesContact) ||
                    (currentStep === 4 && !formData.documents)
                  }
                >
                  –î–∞–ª–µ–µ
                  <Icon name="ChevronRight" className="ml-2" />
                </Button>
              </div>
            )}
          </CardContent>
        </Card>
      </div>

      {/* –î–∏–∞–ª–æ–≥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ */}
      <Dialog open={showCodeDialog} onOpenChange={setShowCodeDialog}>
        <DialogContent className="animate-scale-in">
          <DialogHeader>
            <DialogTitle>üì± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞</DialogTitle>
          </DialogHeader>
          <div className="space-y-4">
            <p>–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –Ω–∞ –Ω–æ–º–µ—Ä {formData.phone}</p>
            <Input
              placeholder="0000"
              value={verificationCode}
              onChange={(e) => setVerificationCode(e.target.value)}
              maxLength={4}
              className="text-center text-2xl"
            />
            <Button
              onClick={handleCodeSubmit}
              disabled={verificationCode.length !== 4 || isVerifying}
              className="w-full bg-mfo-blue-600 hover:bg-mfo-blue-700"
            >
              {isVerifying ? '–ü—Ä–æ–≤–µ—Ä–∫–∞...' : '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å'}
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* –î–∏–∞–ª–æ–≥ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞ */}
      <Dialog open={showCallbackDialog} onOpenChange={setShowCallbackDialog}>
        <DialogContent className="animate-scale-in">
          <DialogHeader>
            <DialogTitle>üìû –û–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫</DialogTitle>
          </DialogHeader>
          <div className="space-y-4 text-center">
            <Icon name="Phone" size={48} className="mx-auto text-green-500" />
            <p>–ù–∞—à –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è</p>
            <p className="text-sm text-gray-600">
              –ó–≤–æ–Ω–æ–∫ –±—É–¥–µ—Ç –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä: 
              <br />
              <strong>8 (999) 943-86-89</strong>
            </p>
            <Button
              onClick={() => {
                // –ò–º–∏—Ç–∞—Ü–∏—è –∑–≤–æ–Ω–∫–∞
                window.location.href = 'tel:+79999438689';
                setShowCallbackDialog(false);
              }}
              className="w-full bg-green-600 hover:bg-green-700"
            >
              <Icon name="Phone" className="mr-2" />
              –ü–æ–ª—É—á–∏—Ç—å –∑–≤–æ–Ω–æ–∫ —Å–µ–π—á–∞—Å
            </Button>
          </div>
        </DialogContent>
      </Dialog>

      {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—É–∫–∏ */}
      <div className="fixed bottom-4 left-4 right-4 bg-white border border-gray-200 rounded-lg shadow-lg p-4 animate-slide-up">
        <div className="flex items-center justify-between">
          <Button size="sm" variant="outline" className="mr-4 flex-shrink-0">
            –ü—Ä–∏–Ω—è—Ç—å
          </Button>
          <p className="text-sm text-gray-600">
            –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º cookies –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã —Å–∞–π—Ç–∞.
          </p>
        </div>
      </div>
    </div>
  );
};

export default Index;